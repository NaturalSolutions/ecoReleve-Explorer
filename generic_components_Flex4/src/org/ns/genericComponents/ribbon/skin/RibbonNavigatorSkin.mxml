<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
    	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx" 
		alpha.disabled="0.5" >
    
	<s:transitions>
		<s:Transition fromState="normalAndMinimized" toState="normalAndMaximized">
			<s:Scale target="{vs}" scaleYFrom="0" scaleYTo="1" duration="200"/>
		</s:Transition>
		<s:Transition fromState="normalAndMaximized" toState="normalAndMinimized">
			<s:Scale target="{vs}" scaleYFrom="1" scaleYTo="0" duration="200"/>
		</s:Transition>
	</s:transitions>

	<fx:Metadata>
		[HostComponent("org.ns.genericComponents.ribbon.RibbonNavigator")]
	</fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[ 
			
			[Bindable]
			[Embed('../assets/up.png')]
			private var icoUp:Class;
			
			[Bindable]
			[Embed('../assets/down.png')]
			private var icoDown:Class;
			
			[Bindable]
			[Embed('../assets/about.png')]
			private var icoAbout:Class;
			
			
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    //background.visible = false;
                }
                else
                {
                    background.visible = true;
                    //bgFill.color = getStyle("backgroundColor");
                    //bgFill.alpha = getStyle("backgroundAlpha");
                }
				
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
		<s:State name="normalAndMinimized" />
		<s:State name="normalAndMaximized" />
        <s:State name="disabled" />
    </s:states>
    
    <!--- Defines the appearance of the SkinnableContainer class's background. -->
    <s:Rect id="background" x="0" y="0" width="100%" height="{tabBar.height + hGroup.paddingTop + hGroup.y}">
		<s:fill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x767a83"  
								 alpha="0.85" />
				<s:GradientEntry color="0xbec1c8" 
								 alpha="0.85" />
			</s:LinearGradient>
		</s:fill>
    </s:Rect>
    
    <!--
        Note: setting the minimum size to 0 here so that changes to the host component's
        size will not be thwarted by this skin part's minimum size.   This is a compromise,
        more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
    -->
	
	<!--- @copy spark.components.SkinnableContainer#contentGroup -->
	<s:Group id="navigator" left="0" right="0" top="0" bottom="0" height="100">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>

		<mx:ViewStack id="vs" x="0" y="{hGroup.height + hGroup.y + hGroup.paddingTop -2}" creationPolicy="all" width="100%" borderStyle="solid" borderColor="0x000000"/>
		
		<s:HGroup id="hGroup" x="0" y="3" paddingLeft="10" paddingTop="2" verticalAlign="bottom">
			
			<s:TabBar id="tabBar" dataProvider="{vs}" width="100%" height="30" skinClass="org.ns.genericComponents.ribbon.skin.RibbonTabBarSkin" />
			<s:Image id="imgSize" 
					 useHandCursor="true" buttonMode="true" 
					 source.normalAndMaximized="{icoUp}" 
					 source.normalAndMinimized="{icoDown}" 
					 toolTip.normalAndMaximized="minimize" 
					 toolTip.normalAndMinimized="maximize" 
					 />
			
		</s:HGroup>
		<s:Image id="imgAbout"
				 source="{icoAbout}"
				 x="{this.width -35}" y="2" 
				 buttonMode="true" useHandCursor="true" toolTip="about"
				 />
	</s:Group>

</s:Skin>

